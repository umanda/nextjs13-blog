import { NestedExtensionType, Extension, Plural } from '@directus/types';
import { Readable } from 'node:stream';

declare function isIn<T extends readonly string[]>(value: string, array: T): value is T[number];
declare function isTypeIn<T extends {
    type?: string;
}, E extends string>(object: T, array: readonly E[]): object is Extract<T, {
    type?: E;
}>;

declare function ensureExtensionDirs(extensionsPath: string, types: readonly NestedExtensionType[]): Promise<void>;

declare function generateExtensionsEntrypoint(extensions: Extension[]): string;

declare const findExtension: (folder: string, filename: string) => Promise<string>;
declare function resolvePackageExtensions(root: string, extensionNames?: string[]): Promise<Extension[]>;
declare function getPackageExtensions(root: string): Promise<Extension[]>;
declare function getLocalExtensions(root: string): Promise<Extension[]>;

declare const isReadableStream: (input: any) => input is Readable;

declare function listFolders(location: string): Promise<string[]>;

declare function pathToRelativeUrl(filePath: string, root?: string): string;

declare function pluralize<T extends string>(str: T): Plural<T>;
declare function depluralize<T extends string>(str: Plural<T>): T;

declare const readableStreamToString: (stream: Readable) => Promise<string>;

declare function resolvePackage(name: string, root?: string): string;

export { depluralize, ensureExtensionDirs, findExtension, generateExtensionsEntrypoint, getLocalExtensions, getPackageExtensions, isIn, isReadableStream, isTypeIn, listFolders, pathToRelativeUrl, pluralize, readableStreamToString, resolvePackage, resolvePackageExtensions };
